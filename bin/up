#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander');
var pkg = require('../package');
var thumb = require('osthumb');
var copy = require('cliparoo');
var path = require('path');
var basename = path.basename;
var uid = require('uid2');
var up = require('..');
var fs = require('fs');

// options

program
  .version(pkg.version)
  .usage('[options] [file ...]')
  .option('-t, --title <name>', 'stream title name', '')
  .option('-s, --stream <id>', 'upload to the given stream')
  .option('-d, --direct', 'output direct links')
  .option('-f, --filename <str>', 'assign filename to stdin')
  .option('-T, --thumb-size <n>', 'thumbnail size in pixels [600]', 600)
  .command('streams', 'list streams')
  .command('config', 'configure up(1)')
  .parse(process.argv);

// title

process.title = 'up';

// sub-command

if (program.runningCommand) return;

// size

var size = program.thumbSize;

// reporter

var reporter = 'console';
if (program.json) reporter = 'json';
if (program.jsonStream) reporter = 'json-stream';

// config

var conf = up.readConfig();
var client = up.client(conf);

// stream

var title = '' == program.title ? null : program.title;
var files = program.args;

var stream = client.stream({
  id: program.stream,
  title: title
});

// copy

stream.on('save', function(){
  copy(stream.url);
});

// stdin reporter

var isatty = process.stdin.isTTY
if (!files.length && isatty) reporter = 'plain';

// reporter

var Reporter = require('../lib/' + reporter);
var reporter = new Reporter(stream, {
  progressOnly: files.length > process.stdout.columns - 5,
  direct: program.direct
});

// stdin

if (!files.length) {
  var out = fs.createWriteStream('/tmp/up-' + uid(10));
  process.stdin.pipe(out);
  process.stdin.resume();
  process.stdin.on('end', function(){
    var file = program.filename || out.path;
    var title = 'Untitled' == program.title ? null : program.title;
    var item = stream.item({ title: title, filename: file });
    item.file(out.path);
    stream.save(function(err){
      if (err) throw err;
    });
  });
  return;
}

// files

files.forEach(function(file){
  var item = stream.item();
  if (isUrl(file)) return item.url(file);
  var i = item.file(file);
  thumb(i._file, { width: size, height: size }, function(err, path){
    if (err || !path) return;
    i.thumb(path);
  });
});

// save

stream.on('error', function(err){
  throw err;
});

stream.save(function(err){
  if (err) throw err;
});

/**
 * Check if `str` is a url.
 */

function isUrl(str) {
  return ~str.indexOf('://');
}
