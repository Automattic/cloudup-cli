#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander');
var pkg = require('../package');
var thumb = require('osthumb');
var path = require('path');
var basename = path.basename;
var uid = require('uid2');
var up = require('..');
var fs = require('fs');

// options

program
  .version(pkg.version)
  .usage('[options] [file ...]')
  .option('-t, --title <name>', 'stream title name', 'Untitled')
  .option('-d, --direct', 'output direct links')
  .option('-f, --filename <str>', 'assign filename to stdin')
  .option('-s, --thumb-size <n>', 'thumbnail size in pixels [400]', 400)
  .command('streams', 'list streams')
  .parse(process.argv);

// sub-command

if (program.runningCommand) return;

// size

var size = program.thumbSize;

// reporter

var reporter = 'console';
if (program.json) reporter = 'json';
if (program.jsonStream) reporter = 'json-stream';

// config

try {
  var conf = require(process.env.HOME + '/.cloudup.json');
} catch (err) {
  throw new Error('failed to load ~/.cloudup.json');
}

// ensure user/pass

if (!conf.user) throw new Error('"user" config required');
if (!conf.pass) throw new Error('"pass" config required');

// stream

var files = program.args;
var title = program.title;

// stdin reporter

var isatty = process.stdin.isTTY
if (!files.length && isatty) reporter = 'plain';

var col = up.stream({
  title: title,
  reporter: reporter,
  direct: program.direct,
  remote: conf.remote,
  user: conf.user,
  pass: conf.pass
});

// stdin

if (!files.length) {
  var out = fs.createWriteStream('/tmp/up-' + uid(10));
  process.stdin.pipe(out);
  process.stdin.resume();
  process.stdin.on('end', function(){
    var file = program.filename || out.path;
    var title = 'Untitled' == program.title ? null : program.title;
    var item = col.item({ title: title, filename: file });
    item.file(out.path);
    col.save(function(err){
      if (err) throw err;
    });
  });
  return;
}

// files

files.forEach(function(file){
  var item = col.item();
  if (isUrl(file)) return item.url(file);
  var i = item.file(file);
  i.on('save', function(){
    thumb(i._file, { width: size, height: size }, function(err, path){
      if (err || !path) return;
      i.thumb(path);
    });
  });
});

// save

col.save(function(err){
  if (err) throw err;
});

/**
 * Check if `str` is a url.
 */

function isUrl(str) {
  return ~str.indexOf('://');
}
