#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander')
  , path = require('path')
  , basename = path.basename
  , uid = require('uid2')
  , up = require('..')
  , fs = require('fs')

// options

program
  .usage('[options] [file ...]')
  .option('-t, --title <name>', 'collection title name', 'Untitled')
  .option('-d, --direct', 'output direct links')
  .option('-j, --json', 'output json')
  .option('-J, --json-stream', 'output streaming json')
  .option('-f, --filename <str>', 'assign filename to stdin')
  .parse(process.argv);

// reporter

var reporter = 'console';
if (program.json) reporter = 'json';
if (program.jsonStream) reporter = 'json-stream';

// collection

var files = program.args;
var title = program.title;
var col = up.collection({
  title: title,
  reporter: reporter,
  direct: program.direct
});

// stdin

if (!files.length) {
  var out = fs.createWriteStream('/tmp/up-' + uid(10));
  process.stdin.pipe(out);
  process.stdin.resume();
  process.stdin.on('end', function(){
    var file = program.filename || out.path;
    var title = 'Untitled' == program.title ? null : program.title;
    var item = col.item({ title: title filename: file });
    item.file(out.path);
    col.save(function(err){
      if (err) throw err;
    });
  });
  return;
}

// files

files.forEach(function(file){
  var item = col.item({ title: basename(file) }); // TODO: remove title
  if (isUrl(file)) return item.url(file);
  item.file(file);
});

// save

col.save(function(err){
  if (err) throw err;
});

/**
 * Check if `str` is a url.
 */

function isUrl(str) {
  return ~str.indexOf('://');
}
