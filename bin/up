#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander');
var isCode = require('is-code');
var pkg = require('../package');
var thumb = require('osthumb');
var copy = require('cliparoo');
var path = require('path');
var head = require('head');
var basename = path.basename;
var uid = require('uid2');
var up = require('..');
var fs = require('fs');
var index = 0;

// options

program
  .version(pkg.version)
  .usage('[options] [file ...]')
  .option('-t, --title <name>', 'stream title name', '')
  .option('-s, --stream <id>', 'upload to the given stream')
  .option('-d, --direct', 'output direct links')
  .option('-f, --filename <str>', 'assign filename to stdin')
  .option('-T, --thumb-size <n>', 'thumbnail size in pixels [600]', 600)
  .command('open', 'open matching stream')
  .command('copy', 'copy matching stream\'s url')
  .command('streams', 'list streams')
  .command('config', 'configure up(1)')
  .parse(process.argv);

// title

process.title = 'up';

// sub-command

if (program.runningCommand) return;

// size

var size = program.thumbSize;

// reporter

var reporter = 'console';
if (program.json) reporter = 'json';
if (program.jsonStream) reporter = 'json-stream';

// config

var conf = up.readConfig();
var client = up.client(conf);

// stream

var title = '' == program.title ? null : program.title;
var files = program.args;

var stream = client.stream({
  id: program.stream,
  title: title
});

// copy

stream.on('save', function(){
  copy(stream.url);
});

// stdin reporter

var isatty = process.stdin.isTTY
if (!files.length && isatty) reporter = 'plain';

// reporter

var Reporter = require('../lib/' + reporter);
var reporter = new Reporter(stream, {
  progressOnly: files.length > process.stdout.rows - 5,
  direct: program.direct
});

// stdin

if (!files.length) {
  if (process.stdin.isTTY) {
    // user simply typed `up`... display "help" page
    program.help();
  } else {
    // upload whatever comes through stdin as a stream
    var out = fs.createWriteStream('/tmp/up-' + uid(10));
    process.stdin.resume();
    process.stdin.pipe(out);
    process.stdin.on('end', function(){
      var filename = program.filename;
      var title = '' == program.titleÂ ? null : program.title;

      var opts = { title: title };

      if (textual(out.path)) {
        filename = filename || 'untitled.txt';
        opts.mime = 'text/plain';
      }

      filename = filename || out.path;
      opts.filename = filename;

      var item = stream.item(opts);

      item.file(out.path);
      stream.save(function(err){
        if (err) throw err;
      });
    });
  }
  return;
}

// files

files.forEach(function(file){
  var ind = Date.now() + ++index;
  var item = stream.item({ index: ind });
  if (isUrl(file)) return item.link(file);
  item.file(file);
  if (isCode(file)) return;
  thumb(file, { width: size, height: size }, function(err, path){
    if (err || !path) return;
    item.thumb(path);
  });
});

// save

stream.on('error', function(err){
  console.error(err.message);
});

stream.save(function(err){
  if (err) throw err;
});

/**
 * Check if `file` looks textual.
 */

function textual(file) {
  var buf = head(file, 24 * 1024);

  for (var i = 0; i < buf.length; i++) {
    if (0 == buf[i]) return false;
  }

  return true;
}

/**
 * Check if `str` is a url.
 */

function isUrl(str) {
  return ~str.indexOf('://');
}
