#!/usr/bin/env node

/**
 * Module dependencies.
 */

var Cloudup = require('cloudup-client');
var program = require('commander');
var max = require('max-component');
var List = require('term-list');
var bytes = require('bytes');
var open = require('open');
var path = require('path');
var extname = path.extname;
var up = require('..');
var s = require('printf');

// options

program
  .usage('[options] [query...]')
  .option('-i, --interactive', 'display interactive list')
  .parse(process.argv);

// title

process.title = 'up-streams';

// query

var query = program.args.join(' ').trim();

// max width

var maxWidth = 40;

// term sizing

var stdout = process.stdout;
var cols = stdout.cols;
var rows = stdout.rows;

// config

var conf = up.readConfig();
var client = up.client(conf);

// fetch streams

client.streams({ title: query }, function(err, streams){
  if (err) throw err;
  if (program.interactive) interactiveStreams(streams);
  else output(streams);
});

/**
 * Output `streams`.
 */

function output(streams) {
  console.log();
  var w = Math.min(maxWidth, maxTitleLength(streams) + 3);
  streams.sort(byTitle).forEach(function(stream){
    console.log(formatStream(stream, w));
  });
  console.log();
}

/**
 * Truncate `str` to `len`.
 */

function truncate(str, len) {
  str = String(str);
  if (str.length < len) return str;
  return str.slice(0, len) + 'â€¦';
}

/**
 * Format `stream` to `width`.
 */

function formatStream(stream, width, removing) {
  if (removing) {
    return s('  \033[31;1m%*s\033[m \033[31m%s\033[m',
      truncate(stream.title || 'Untitled', maxWidth - 2),
      width,
      'press backspace again to remove')
  }

  return s('  \033[36m%*s\033[m \033[90m(%s)\033[m %s',
    truncate(stream.title || 'Untitled', maxWidth - 2),
    width,
    stream.item_ids.length,
    stream.url);
}

/**
 * Format interactive `stream` to `width`.
 */

function formatInteractiveStream(stream, width, removing) {
  if (removing) {
    return s('  \033[31;1m%*s\033[m \033[31m%s\033[m',
      truncate(stream.title || 'Untitled', maxWidth - 2),
      width,
      'press backspace again to remove')
  }

  return s('  \033[36m%*s\033[m \033[90m(%s)\033[m',
    truncate(stream.title || 'Untitled', maxWidth - 2),
    width,
    stream.item_ids.length);
}

/**
 * Display interactive streams list.
 */

function interactiveStreams(streams) {
  var w = Math.min(40, maxTitleLength(streams) + 3);
  var list = new List;
  var removing;

  function find(id) {
    return streams.filter(function(s){
      return s.id == id;
    }).pop();
  }

  streams.sort(byTitle).slice(0, rows - 4).forEach(function(stream){
    list.add(stream.id, formatInteractiveStream(stream, w, false));
  });

  list.start();

  list.on('keypress', function(key, id){
    switch (key.name) {
      case 'return':
        list.stop();
        open(find(id).url);
        break;
      case 'backspace':
        if (removing == id) {
          removing = null;
          list.remove(list.selected);
          client.stream(id).remove(function(err){
            if (err) throw err;
          });
        } else {
          removing = id;
          list.get(id).label = formatInteractiveStream(find(id), w, true);
          list.draw();
        }
        break;
      case 'right':
        removing = null;
        find(id).items(function(err, items){
          if (err) throw err;
          list.stop();
          interactiveItems(items);
        });
        break;
      default:
        if (removing) list.get(removing).label = formatInteractiveStream(find(removing), w);
        removing = null;
    }
  });

  list.on('empty', function(){
    list.stop();
  });

  return list;
}

/**
 * Format `item` to `width`.
 */

function formatItem(item, width, removing) {
  if (removing) {
    return s('  \033[31;1m%*s\033[m \033[31m%s\033[m',
      truncate(item.title || 'Untitled', maxWidth - 2),
      width,
      'press backspace again to remove')
  }

  return s('  \033[36m%*s\033[m %s\033[90m - %s %s\033[0m',
    truncate(item.title || 'Untitled', maxWidth - 2),
    width,
    item.url,
    bytes(item.size || 0),
    item.filename || '');
}

/**
 * Format `item` to `width`.
 */

function formatInteractiveItem(item, width, removing) {
  if (removing) {
    return s('  \033[31;1m%*s\033[m \033[31m%s\033[m',
      truncate(item.title || 'Untitled', maxWidth - 2),
      width,
      'press backspace again to remove')
  }

  var size = item.size ? bytes(item.size) : '';
  var ext = extname(item.filename || '').toLowerCase();
  var title = truncate(item.title || 'Untitled', maxWidth - 2).trim();

  return s('  \033[36m%*s\033[m %s\033[90m %s\033[0m', title, width, ext, size);
}

/**
 * Display interactive items list.
 */

function interactiveItems(items) {
  var w = Math.min(40, maxTitleLength(items) + 3);
  var list = new List;
  var removing;

  function find(id) {
    return items.filter(function(i){
      return i.id == id;
    }).pop();
  }

  items.sort(byTitle).forEach(function(item){
    list.add(item.id, formatInteractiveItem(item, w));
  });

  list.start();

  function showStreams(id) {
    removing = null;
    list.stop();
    client.streams({ title: query }, function(err, streams){
      if (err) throw err;
      var list = interactiveStreams(streams);
      if (id) list.select(id);
    });
  }

  list.on('keypress', function(key, id){
    switch (key.name) {
      case 'return':
        list.stop();
        open(find(id).url);
        break;
      case 'backspace':
        if (removing == id) {
          removing = null;
          list.remove(list.selected);
          var item = find(id);
          item.remove(function(err){
            if (err) throw err;
            if (!list.items.length) showStreams(item.stream.id);
          });
        } else {
          removing = id;
          list.get(id).label = formatInteractiveItem(find(id), w, true);
          list.draw();
        }
        break;
      case 'left':
        showStreams(find(id).stream.id);
        break;
      default:
        if (removing) list.get(removing).label = formatInteractiveItem(find(removing), w);
        removing = null;
    }
  });

  list.on('empty', function(){
    list.stop();
  });
}

/**
 * Return max title length in `streams`.
 */

function maxTitleLength(streams) {
  return max(streams, function(s){
    return (s.title || '').length;
  });
}

/**
 * Sort by title.
 */

function byTitle(a, b) {
  if (a.title > b.title) return 1;
  if (a.title < b.title) return -1;
  return 0;
}
